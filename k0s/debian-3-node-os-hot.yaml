heat_template_version: 2021-04-16

description: Template for Debian VM for K0S (3 nodes - 1 controller and 2 workers)

parameters:
  prefix:
    type: string
    description: "Resource name prefix"
    label: "Resource name prefix"
    constraints:
      - length:
          min: 1
          max: 32
        description: "Resource name prefix must be between 1 and 32 characters"
      - allowed_pattern: "^[a-zA-Z0-9-_]+$"
        description: "Resource name prefix can only contain letters, numbers, underscore and hyphen"

  registry_mirror:
    type: string
    description: "Image registry mirror URL"
    label: "Image Registry Mirror"

  image_id:
    type: string
    description: "Image to use for the instances."
    default: debian-12-genericcloud-amd64-20250316-2053
    label: "Server Image"

  ssh_pub_key:
    type: string
    description: "SSH public key for instance access"
    label: "SSH Public Key"
    constraints:
      - length:
          min: 1

  external_network:
    type: string
    description: "External network for router gateway"
    default: "public"
    label: "External Network"

  network_cidr:
    type: string
    description: "CIDR for the network"
    default: "10.42.71.0/24"
    label: "Network CIDR"

  allocation_pool_start:
    type: string
    description: "Start of IP allocation pool"
    default: "10.42.71.10"
    label: "Allocation Pool Start"

  allocation_pool_end:
    type: string
    description: "End of IP allocation pool"
    default: "10.42.71.250"
    label: "Allocation Pool End"

  controller_ip:
    type: string
    description: "IP address for controller node"
    default: "10.42.71.101"
    label: "Controller IP"

  worker_node_1_ip:
    type: string
    description: "IP address for first worker node"
    default: "10.42.71.102"
    label: "Worker Node 1 IP"

  worker_node_2_ip:
    type: string
    description: "IP address for second worker node"
    default: "10.42.71.103"
    label: "Worker Node 2 IP"

  availability_zone:
    type: string
    description: "Availability zone for instances"
    default: "nova"
    label: "Availability Zone"

  controller_flavor:
    type: string
    description: "Flavor for controller instance"
    label: "Controller Instance Flavor"

  worker_flavor:
    type: string
    description: "Flavor for worker instances"
    label: "Worker Instance Flavor"

  controller_volume_size:
    type: number
    description: "Size of root volume for controller node in GB"
    label: "Controller Volume Size"

  worker_volume_size:
    type: number
    description: "Size of root volume for worker nodes in GB"
    label: "Worker Volume Size"

resources:
  network:
    type: 'OS::Neutron::Net'
    properties:
      name:
        str_replace:
          template: $prefix-k0s-network
          params:
            $prefix:
              get_param: prefix
      port_security_enabled: false
      admin_state_up: true
      availability_zone_hints:
        - get_param: availability_zone

  subnet:
    type: 'OS::Neutron::Subnet'
    properties:
      name:
        str_replace:
          template: $prefix-k0s-subnet
          params:
            $prefix:
              get_param: prefix
      network_id:
        get_resource: network
      cidr:
        get_param: network_cidr
      ip_version: 4
      enable_dhcp: true
      allocation_pools:
        - start:
            get_param: allocation_pool_start
          end:
            get_param: allocation_pool_end

  router:
    type: 'OS::Neutron::Router'
    properties:
      name:
        str_replace:
          template: $prefix-k0s-router
          params:
            $prefix:
              get_param: prefix
      admin_state_up: true
      external_gateway_info:
        network:
          get_param: external_network

  router_interface:
    type: 'OS::Neutron::RouterInterface'
    properties:
      router_id:
        get_resource: router
      subnet_id:
        get_resource: subnet

  port_controller:
    type: 'OS::Neutron::Port'
    properties:
      name:
        str_replace:
          template: $prefix-k0s-port-controller
          params:
            $prefix:
              get_param: prefix
      network:
        get_resource: network
      admin_state_up: true
      port_security_enabled: false
      fixed_ips:
        - subnet:
            get_resource: subnet
          ip_address:
            get_param: controller_ip

  port_worker_node_1:
    type: 'OS::Neutron::Port'
    properties:
      name:
        str_replace:
          template: $prefix-k0s-port-worker-node-1
          params:
            $prefix:
              get_param: prefix
      network:
        get_resource: network
      admin_state_up: true
      port_security_enabled: false
      fixed_ips:
        - subnet:
            get_resource: subnet
          ip_address:
            get_param: worker_node_1_ip

  port_worker_node_2:
    type: 'OS::Neutron::Port'
    properties:
      name:
        str_replace:
          template: $prefix-k0s-port-worker-node-2
          params:
            $prefix:
              get_param: prefix
      network:
        get_resource: network
      admin_state_up: true
      port_security_enabled: false
      fixed_ips:
        - subnet:
            get_resource: subnet
          ip_address:
            get_param: worker_node_2_ip

  floating_ip_controller:
    type: 'OS::Neutron::FloatingIP'
    properties:
      floating_network:
        get_param: external_network
      port_id:
        get_resource: port_controller

  floating_ip_worker_node_1:
    type: 'OS::Neutron::FloatingIP'
    properties:
      floating_network:
        get_param: external_network
      port_id:
        get_resource: port_worker_node_1

  floating_ip_worker_node_2:
    type: 'OS::Neutron::FloatingIP'
    properties:
      floating_network:
        get_param: external_network
      port_id:
        get_resource: port_worker_node_2

  controller_wait_handle:
    type: 'OS::Heat::WaitConditionHandle'

  controller_wait_condition:
    type: 'OS::Heat::WaitCondition'
    properties:
      handle:
        get_resource: controller_wait_handle
      timeout: 1800

  worker_node_1_wait_handle:
    type: 'OS::Heat::WaitConditionHandle'

  worker_node_1_wait_condition:
    type: 'OS::Heat::WaitCondition'
    properties:
      handle:
        get_resource: worker_node_1_wait_handle
      timeout: 1800

  worker_node_2_wait_handle:
    type: 'OS::Heat::WaitConditionHandle'

  worker_node_2_wait_condition:
    type: 'OS::Heat::WaitCondition'
    properties:
      handle:
        get_resource: worker_node_2_wait_handle
      timeout: 1800

  controller_user_data:
    type: 'OS::Heat::Value'
    properties:
      value:
        str_replace:
          template: |
            #cloud-config

            # https://cloudinit.readthedocs.io/en/24.1/reference/examples.html
            # Logs are in:
            #  - /var/log/cloud-init.log
            #  - /var/log/cloud-init-output.log

            users:
              - name: root
                shell: /bin/bash
                lock_passwd: false
                plain_text_passwd: root
                ssh_authorized_keys: %ssh_keys%

            runcmd:
              # Install ansible package
              - apt-get update && apt-get install -y ansible-core git || true
              # Run ansible playbook
              - |
                ansible-pull -U "https://github.com/s3rj1k/k8s-playground.git" \
                  k0s/debian-playbook.yml \
                  -vvvv \
                  -e "registry_mirror='%registry_mirror%' \
                      metallb_ip_range_start='%metallb_ip_range_start%' \
                      metallb_ip_range_end='%metallb_ip_range_end%'"
              # Wait for k0s to be ready
              - |
                until k0s status 2>/dev/null; do
                  echo "Waiting for k0s to be ready..."
                  sleep 10
                done
              # Remove ansible package
              - apt-get remove -y --autoremove --purge ansible-core || true
              # Generate worker token and notify wait condition with the token
              - |
                WORKER_TOKEN=$(k0s token create --role=worker)
                %wc_notify% --data-binary "{\"status\": \"SUCCESS\", \"data\": \"$WORKER_TOKEN\"}"
          params:
            '%ssh_keys%':
              get_param: ssh_pub_key
            '%registry_mirror%':
              get_param: registry_mirror
            '%metallb_ip_range_start%':
              get_param: allocation_pool_start
            '%metallb_ip_range_end%':
              get_param: allocation_pool_end
            '%wc_notify%':
              get_attr:
                - controller_wait_handle
                - curl_cli

  worker_node_1_user_data:
    type: 'OS::Heat::Value'
    properties:
      value:
        str_replace:
          template: |
            #cloud-config

            # https://cloudinit.readthedocs.io/en/24.1/reference/examples.html
            # Logs are in:
            #  - /var/log/cloud-init.log
            #  - /var/log/cloud-init-output.log

            users:
              - name: root
                shell: /bin/bash
                lock_passwd: false
                plain_text_passwd: root
                ssh_authorized_keys: %ssh_keys%

            write_files:
              - path: /tmp/worker_token.json
                content: '%worker_token%'
                permissions: '0600'

            runcmd:
              # Install ansible package
              - apt-get update && apt-get install -y ansible-core git || true
              # Get worker token
              - TOKEN=$(cat /tmp/worker_token.json | tr -d ' \n\t\r' | awk -F'"' '/"1":/ {print $4}')
              # Run ansible playbook
              - |
                ansible-pull -U "https://github.com/s3rj1k/k8s-playground.git" \
                  k0s/debian-playbook.yml \
                  -vvvv \
                  -e "registry_mirror='%registry_mirror%' \
                      worker_token='${TOKEN}'"
              # Remove worker token
              - rm -f /tmp/worker_token.json
              # Remove ansible package
              - apt-get remove -y --autoremove --purge ansible-core || true
              # Notify wait condition that worker setup is complete
              - |
                %wc_notify% --data-binary '{"status": "SUCCESS", "data": "Worker node #1 setup complete"}'
          params:
            '%ssh_keys%':
              get_param: ssh_pub_key
            '%registry_mirror%':
              get_param: registry_mirror
            '%worker_token%':
              get_attr:
                - controller_wait_condition
                - data
            '%wc_notify%':
              get_attr:
                - worker_node_1_wait_handle
                - curl_cli

  worker_node_2_user_data:
    type: 'OS::Heat::Value'
    properties:
      value:
        str_replace:
          template: |
            #cloud-config

            # https://cloudinit.readthedocs.io/en/24.1/reference/examples.html
            # Logs are in:
            #  - /var/log/cloud-init.log
            #  - /var/log/cloud-init-output.log

            users:
              - name: root
                shell: /bin/bash
                lock_passwd: false
                plain_text_passwd: root
                ssh_authorized_keys: %ssh_keys%

            write_files:
              - path: /tmp/worker_token.json
                content: '%worker_token%'
                permissions: '0600'

            runcmd:
              # Install ansible package
              - apt-get update && apt-get install -y ansible-core git || true
              # Get worker token
              - TOKEN=$(cat /tmp/worker_token.json | tr -d ' \n\t\r' | awk -F'"' '/"1":/ {print $4}')
              # Run ansible playbook
              - |
                ansible-pull -U "https://github.com/s3rj1k/k8s-playground.git" \
                  k0s/debian-playbook.yml \
                  -vvvv \
                  -e "registry_mirror='%registry_mirror%' \
                      worker_token='${TOKEN}'"
              # Remove worker token
              - rm -f /tmp/worker_token.json
              # Remove ansible package
              - apt-get remove -y --autoremove --purge ansible-core || true
              # Notify wait condition that worker setup is complete
              - |
                %wc_notify% --data-binary '{"status": "SUCCESS", "data": "Worker node #2 setup complete"}'
          params:
            '%ssh_keys%':
              get_param: ssh_pub_key
            '%registry_mirror%':
              get_param: registry_mirror
            '%worker_token%':
              get_attr:
                - controller_wait_condition
                - data
            '%wc_notify%':
              get_attr:
                - worker_node_2_wait_handle
                - curl_cli

  controller:
    type: 'OS::Nova::Server'
    properties:
      name:
        str_replace:
          template: '%prefix%-k0s-controller'
          params:
            '%prefix%':
              get_param: prefix
      availability_zone:
        get_param: availability_zone
      flavor:
        get_param: controller_flavor
      config_drive: true
      block_device_mapping_v2:
        - image_id:
            get_param: image_id
          delete_on_termination: true
          boot_index: 0
          volume_size:
            get_param: controller_volume_size
      networks:
        - port:
            get_resource: port_controller
      user_data_format: RAW
      user_data:
        get_attr:
          - controller_user_data
          - value

  worker_node_1:
    type: 'OS::Nova::Server'
    depends_on: controller_wait_condition
    properties:
      name:
        str_replace:
          template: '%prefix%-k0s-worker-node-1'
          params:
            '%prefix%':
              get_param: prefix
      availability_zone:
        get_param: availability_zone
      flavor:
        get_param: worker_flavor
      config_drive: true
      block_device_mapping_v2:
        - image_id:
            get_param: image_id
          delete_on_termination: true
          boot_index: 0
          volume_size:
            get_param: worker_volume_size
      networks:
        - port:
            get_resource: port_worker_node_1
      user_data_format: RAW
      user_data:
        get_attr:
          - worker_node_1_user_data
          - value

  worker_node_2:
    type: 'OS::Nova::Server'
    depends_on: controller_wait_condition
    properties:
      name:
        str_replace:
          template: '%prefix%-k0s-worker-node-2'
          params:
            '%prefix%':
              get_param: prefix
      availability_zone:
        get_param: availability_zone
      flavor:
        get_param: worker_flavor
      config_drive: true
      block_device_mapping_v2:
        - image_id:
            get_param: image_id
          delete_on_termination: true
          boot_index: 0
          volume_size:
            get_param: worker_volume_size
      networks:
        - port:
            get_resource: port_worker_node_2
      user_data_format: RAW
      user_data:
        get_attr:
          - worker_node_2_user_data
          - value

outputs:
  controller_floating_ip:
    description: Floating IP address for Controller Node
    value:
      get_attr:
        - floating_ip_controller
        - floating_ip_address

  worker_node_1_floating_ip:
    description: Floating IP address for Worker Node 1
    value:
      get_attr:
        - floating_ip_worker_node_1
        - floating_ip_address

  worker_node_2_floating_ip:
    description: Floating IP address for Worker Node 2
    value:
      get_attr:
        - floating_ip_worker_node_2
        - floating_ip_address

  controller_user_data:
    description: Rendered Controller user-data
    value:
      get_attr:
        - controller_user_data
        - value

  worker_node_1_user_data:
    description: Rendered Worker Node 1 user-data
    value:
      get_attr:
        - worker_node_1_user_data
        - value

  worker_node_2_user_data:
    description: Rendered Worker Node 2 user-data
    value:
      get_attr:
        - worker_node_2_user_data
        - value

  worker_token:
    description: Worker token
    value:
      get_attr:
        - controller_wait_condition
        - data
