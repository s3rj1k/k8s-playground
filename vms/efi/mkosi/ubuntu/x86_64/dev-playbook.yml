# Copyright 2025 s3rj1k
# SPDX-License-Identifier: MIT

# DEBUG: ansible-pull -U https://github.com/s3rj1k/playground.git vms/efi/mkosi/ubuntu/x86_64/dev-playbook.yml

---
- name: Setup development environment on AMD64
  hosts: localhost
  connection: local
  become: true
  gather_facts: true
  ignore_errors: false

  pre_tasks:
    - name: Check if system is supported
      block:
        - name: Check if distribution is Debian or Ubuntu
          fail:
            msg: "This playbook only supports Debian or Ubuntu distributions"
          when: ansible_distribution not in ["Debian", "Ubuntu"]

        - name: Check if architecture is AMD64
          fail:
            msg: "This playbook only supports AMD64 architecture"
          when: ansible_architecture != "x86_64"

        - name: Get OS version
          debug:
            msg: "Running on {{ ansible_distribution }} {{ ansible_distribution_version }} ({{ ansible_architecture }})"

    - name: Wait for system to be ready
      wait_for:
        path: /var/lib/cloud/instance/boot-finished
        timeout: 600
      when: ansible_service_mgr is defined and lookup('env', 'CLOUD_INIT') != ''

  handlers:
    - name: Restart systemd-resolved
      systemd:
        name: systemd-resolved
        state: restarted
        daemon_reload: yes
      when: ansible_service_mgr == 'systemd'

    - name: Restart Docker
      systemd:
        name: docker
        state: restarted
        daemon_reload: yes
      when: ansible_service_mgr == 'systemd'

  tasks:
    - name: Clean up system packages and snap
      block:
        - name: Remove all snap packages
          shell: |
            snap list | awk '!/^Name|^core|^snapd|^lxd/ {print $1}' | xargs -r snap remove --purge
            snap list | awk '/^lxd/ {print $1}' | xargs -r snap remove --purge
            snap list | awk '/^core/ {print $1}' | xargs -r snap remove --purge
            snap list | awk '/^snapd/ {print $1}' | xargs -r snap remove --purge
            snap list | awk '!/^Name/ {print $1}' | xargs -r snap remove --purge
          ignore_errors: yes
          when: ansible_distribution == "Ubuntu"

        - name: Remove system packages
          apt:
            name:
              - plymouth
              - snapd
            state: absent
            purge: yes
            autoremove: yes

        - name: Remove snap directories
          file:
            path: "{{ item }}"
            state: absent
          loop:
            - /root/snap
            - /run/snapd
            - /snap
            - /var/cache/snapd
            - /var/snap

        - name: Mask unnecessary systemd units
          systemd:
            name: "{{ item }}"
            masked: yes
          loop:
            - apparmor.service
            - firewalld.service
            - lxd-installer.socket
            - plymouth-quit-wait.service
            - plymouth-quit.service
            - plymouth-read-write.service
            - plymouth-start.service
            - snapd.mounts-pre.target
            - snapd.seeded.service
            - ufw.service

    - name: Update and upgrade system packages
      apt:
        update_cache: yes
        upgrade: yes
      register: system_upgraded

    - name: Consolidated package management
      block:
        - name: Create directory for apt keyrings
          ansible.builtin.file:
            path: /etc/apt/keyrings
            state: directory
            mode: '0755'

        # Note: `ansible.builtin.deb822_repository` requires Ansible 2.15+

        - name: Download Docker signing key
          ansible.builtin.get_url:
            url: "https://download.docker.com/linux/ubuntu/gpg"
            dest: "/etc/apt/keyrings/docker.asc"
            mode: '0644'

        - name: Create Docker repository file
          ansible.builtin.copy:
            dest: "/etc/apt/sources.list.d/docker.sources"
            content: |
              X-Repolib-Name: docker
              Types: deb
              URIs: https://download.docker.com/linux/{{ ansible_distribution | lower }}
              Signed-By: /etc/apt/keyrings/docker.asc
              Suites: {{ ansible_distribution_release | lower }}
              Architectures: amd64
              Components: stable
              Enabled: yes
            mode: '0644'

        - name: Install all required packages
          apt:
            name:
              # Base dependencies
              - apt-transport-https
              - ca-certificates
              - curl
              - gnupg
              - systemd-resolved
              - tar
              # Locale
              - locales
              # SSH
              - openssh-server
              # GIT
              - git
              - git-lfs
              # Networking
              - ebtables
              - iproute2
              - socat
              # Docker and dependencies
              - containerd.io
              - docker-buildx-plugin
              - docker-ce
              - docker-ce-cli
              - docker-compose-plugin
              # Text and JSON processing
              - gawk
              - jq
              - nano
              - sed
              # TUI
              - mc
              # SSL certificate generation
              - openssl
            state: present
            update_cache: yes
          when: system_upgraded is success

    - name: Install Go
      block:
        - name: Get the latest Golang version
          uri:
            url: "https://go.dev/VERSION?m=text"
            return_content: yes
          register: version_response

        - name: Extract Go version number
          set_fact:
            version: "{{ version_response.content.split('\n')[0] | trim }}"

        - name: Download Go {{ version }}
          get_url:
            url: "https://go.dev/dl/{{ version }}.linux-amd64.tar.gz"
            dest: /tmp/go.tar.gz
            mode: '0644'
          when: version | trim | length > 0

        - name: Remove existing Go installation
          file:
            path: /usr/local/go
            state: absent
          when: version | trim | length > 0

        - name: Extract Go archive
          unarchive:
            src: /tmp/go.tar.gz
            dest: /usr/local
            remote_src: yes
          when: version | trim | length > 0

        - name: Set Go environment variables
          copy:
            dest: /etc/profile.d/go.sh
            content: |
              export GOROOT=/usr/local/go
              export GOPATH=$HOME/go
              export PATH=$GOROOT/bin:$GOPATH/bin:$PATH
            mode: '0644'
          when: version | trim | length > 0

        - name: Create GOPATH directory
          file:
            path: /root/go
            state: directory
            mode: '0755'
          when: version | trim | length > 0

        - name: Remove temporary files
          file:
            path: /tmp/go.tar.gz
            state: absent
          when: version | trim | length > 0

        - name: Verify Go installation
          shell: /usr/local/go/bin/go version
          register: go_verify
          changed_when: false

    - name: Install Kind
      block:
        - name: Get latest version
          uri:
            url: "https://api.github.com/repos/kubernetes-sigs/kind/releases/latest"
            return_content: yes
          register: release_info

        - name: Set version
          set_fact:
            # curl -s "https://api.github.com/repos/kubernetes-sigs/kind/releases/latest" | jq -r ".tag_name"
            version: "{{ release_info.json.tag_name }}"
          when: release_info is defined and release_info.status == 200

        - name: Download Kind binary ({{ version }})
          get_url:
            url: "https://kind.sigs.k8s.io/dl/{{ version }}/kind-linux-amd64"
            dest: /usr/local/bin/kind
            mode: '0755'
          when: version | trim | length > 0

    - name: Install kubectl
      block:
        - name: Get latest version
          uri:
            url: "https://api.github.com/repos/kubernetes/kubernetes/releases/latest"
            return_content: yes
          register: release_info

        - name: Set version
          set_fact:
            # curl -s "https://api.github.com/repos/kubernetes/kubernetes/releases/latest" | jq -r ".tag_name"
            version: "{{ release_info.json.tag_name }}"
          when: release_info is defined and release_info.status == 200

        - name: Download kubectl binary ({{ version }})
          get_url:
            url: "https://dl.k8s.io/release/{{ version }}/bin/linux/amd64/kubectl"
            dest: /usr/local/bin/kubectl
            mode: '0755'
          when: version | trim | length > 0

    - name: Install Krew
      block:
        - name: Get latest version
          uri:
            url: "https://api.github.com/repos/kubernetes-sigs/krew/releases/latest"
            return_content: yes
          register: release_info

        - name: Set version
          set_fact:
            # curl -s "https://api.github.com/repos/kubernetes-sigs/krew/releases/latest" | jq -r ".tag_name"
            version: "{{ release_info.json.tag_name }}"
          when: release_info is defined and release_info.status == 200

        - name: Download archive
          get_url:
            url: "https://github.com/kubernetes-sigs/krew/releases/download/{{ version }}/krew-linux_amd64.tar.gz"
            dest: /tmp/krew.tar.gz
            mode: '0644'
          when: version | trim | length > 0

        - name: Extract binary
          unarchive:
            src: /tmp/krew.tar.gz
            dest: /tmp
            remote_src: yes
          when: version | trim | length > 0

        - name: Install Krew binary ({{ version }})
          shell: |
            /tmp/krew-linux_amd64 install krew
          environment:
            KREW_ROOT: /opt/krew
          args:
            creates: /opt/krew/bin/kubectl-krew
          when: version | trim | length > 0

        - name: Set environment variables
          copy:
            dest: /etc/profile.d/krew.sh
            content: |
              export KREW_ROOT=/opt/krew
              export PATH="${KREW_ROOT}/bin:$PATH"
            mode: '0644'
          when: version | trim | length > 0

        - name: Create directories
          file:
            path: "{{ item }}"
            state: directory
            mode: '0755'
            owner: root
            group: root
          loop:
            - /opt/krew
            - /opt/krew/bin
            - /opt/krew/receipts
          when: version | trim | length > 0

        - name: Remove temporary files
          file:
            path: "{{ item }}"
            state: absent
          loop:
            - /tmp/krew.tar.gz
            - /tmp/krew-linux_amd64

    - name: Install Helm
      block:
        - name: Get latest version
          uri:
            url: "https://api.github.com/repos/helm/helm/releases/latest"
            return_content: yes
          register: release_info

        - name: Set version
          set_fact:
            # curl -s "https://api.github.com/repos/helm/helm/releases/latest" | jq -r ".tag_name"
            version: "{{ release_info.json.tag_name }}"
          when: release_info is defined and release_info.status == 200

        - name: Download archive
          get_url:
            url: "https://get.helm.sh/helm-{{ version }}-linux-amd64.tar.gz"
            dest: /tmp/helm.tar.gz
            mode: '0644'
          when: version | trim | length > 0

        - name: Extract binary
          unarchive:
            src: /tmp/helm.tar.gz
            dest: /tmp
            remote_src: yes
          when: version | trim | length > 0

        - name: Install Helm binary ({{ version }})
          copy:
            src: /tmp/linux-amd64/helm
            dest: /usr/local/bin/helm
            mode: '0755'
            remote_src: yes
          when: version | trim | length > 0

        - name: Remove temporary files
          file:
            path: "{{ item }}"
            state: absent
          loop:
            - /tmp/helm.tar.gz
            - /tmp/linux-amd64

    - name: Install clusterctl
      block:
        - name: Get latest version
          uri:
            url: "https://api.github.com/repos/kubernetes-sigs/cluster-api/releases/latest"
            return_content: yes
          register: release_info

        - name: Set version
          set_fact:
            # curl -s "https://api.github.com/repos/kubernetes-sigs/cluster-api/releases/latest" | jq -r ".tag_name"
            version: "{{ release_info.json.tag_name }}"
          when: release_info is defined and release_info.status == 200

        - name: Download and Install clusterctl binary ({{ version }})
          get_url:
            url: "https://github.com/kubernetes-sigs/cluster-api/releases/download/{{ version }}/clusterctl-linux-amd64"
            dest: /usr/local/bin/clusterctl
            mode: '0755'
          when: version | trim | length > 0

    - name: Install ORAS
      block:
        - name: Get latest version
          uri:
            url: "https://api.github.com/repos/oras-project/oras/releases/latest"
            return_content: yes
          register: release_info

        - name: Set version
          set_fact:
            # curl -s "https://api.github.com/repos/oras-project/oras/releases/latest" | jq -r ".tag_name"
            version: "{{ release_info.json.tag_name }}"
          when: release_info is defined and release_info.status == 200

        - name: Download binary
          get_url:
            url: "https://github.com/oras-project/oras/releases/download/{{ version }}/oras_{{ version | replace('v', '') }}_linux_amd64.tar.gz"
            dest: /tmp/oras.tar.gz
            mode: '0644'
          when: version | trim | length > 0

        - name: Create temporary extraction directory
          file:
            path: /tmp/oras-extract
            state: directory
            mode: '0755'
          when: version | trim | length > 0

        - name: Extract binary
          unarchive:
            src: /tmp/oras.tar.gz
            dest: /tmp/oras-extract
            remote_src: yes
          when: version | trim | length > 0

        - name: Install ORAS binary ({{ version }})
          copy:
            src: /tmp/oras-extract/oras
            dest: /usr/local/bin/oras
            mode: '0755'
            remote_src: yes
          when: version | trim | length > 0

        - name: Cleanup temporary files
          file:
            path: "{{ item }}"
            state: absent
          with_items:
            - /tmp/oras.tar.gz
            - /tmp/oras-extract

    - name: Install task
      block:
        - name: Get latest version
          uri:
            url: "https://api.github.com/repos/go-task/task/releases/latest"
            return_content: yes
          register: release_info

        - name: Set version
          set_fact:
            # curl -s "https://api.github.com/repos/go-task/task/releases/latest" | jq -r ".tag_name"
            version: "{{ release_info.json.tag_name }}"
          when: release_info is defined and release_info.status == 200

        - name: Download archive
          get_url:
            url: "https://github.com/go-task/task/releases/download/{{ version }}/task_linux_amd64.tar.gz"
            dest: /tmp/task.tar.gz
            mode: '0644'
          when: version | trim | length > 0

        - name: Create temporary extraction directory
          file:
            path: /tmp/task-extract
            state: directory
            mode: '0755'
          when: version | trim | length > 0

        - name: Extract binary
          unarchive:
            src: /tmp/task.tar.gz
            dest: /tmp/task-extract
            remote_src: yes
          when: version | trim | length > 0

        - name: Install task binary ({{ version }})
          copy:
            src: /tmp/task-extract/task
            dest: /usr/local/bin/task
            mode: '0755'
            remote_src: yes
          when: version | trim | length > 0

        - name: Add completion to bashrc if not present
          lineinfile:
            path: ~/.bashrc
            line: 'eval "$(task --completion bash)"'
            state: present
            create: yes
          when: version | trim | length > 0

        - name: Cleanup temporary files
          file:
            path: "{{ item }}"
            state: absent
          with_items:
            - /tmp/task.tar.gz
            - /tmp/task-extract

    - name: Install yq
      block:
        - name: Get latest version
          uri:
            url: "https://api.github.com/repos/mikefarah/yq/releases/latest"
            return_content: yes
          register: release_info

        - name: Set version
          set_fact:
            # curl -s "https://api.github.com/repos/mikefarah/yq/releases/latest" | jq -r ".tag_name"
            version: "{{ release_info.json.tag_name }}"
          when: release_info is defined and release_info.status == 200

        - name: Download and Install yq binary ({{ version }})
          get_url:
            url: "https://github.com/mikefarah/yq/releases/download/{{ version }}/yq_linux_amd64"
            dest: /usr/local/bin/yq
            mode: '0755'
          when: version | trim | length > 0

    - name: Install envsubst
      block:
        - name: Get latest version
          uri:
            url: "https://api.github.com/repos/a8m/envsubst/releases/latest"
            return_content: yes
          register: release_info

        - name: Set version
          set_fact:
            # curl -s "https://api.github.com/repos/a8m/envsubst/releases/latest" | jq -r ".tag_name"
            version: "{{ release_info.json.tag_name }}"
          when: release_info is defined and release_info.status == 200

        - name: Download binary
          get_url:
            url: https://github.com/a8m/envsubst/releases/download/{{ version }}/envsubst-Linux-x86_64
            dest: /tmp/envsubst
            mode: '0755'
          when: version | trim | length > 0

        - name: Install envsubst binary ({{ version }})
          copy:
            src: /tmp/envsubst
            dest: /usr/local/bin/envsubst
            mode: '0755'
            remote_src: yes
            owner: root
            group: root
          when: version | trim | length > 0

        - name: Clean up temporary files
          file:
            path: /tmp/envsubst
            state: absent

    - name: Configure Docker
      block:
        - name: Create Docker daemon configuration directory
          file:
            path: /etc/docker
            state: directory
            mode: '0755'

        - name: Ensure directory for systemd-resolved config exists
          file:
            path: /etc/systemd/resolved.conf.d/
            state: directory
            mode: '0755'

        - name: Set Docker daemon configuration
          copy:
            dest: /etc/docker/daemon.json
            mode: '0644'
            content: |
              {
                "default-address-pools": [
                  {
                    "base": "172.17.0.0/16",
                    "size": 24
                  }
                ],
                "dns": [
                  "172.17.0.1"
                ],
                "builder": {
                  "gc": {
                    "enabled": true,
                    "defaultKeepStorage": "10GB",
                    "policy": [
                      {
                        "keepStorage": "10GB",
                        "filter": [
                          "unused-for=42h"
                        ]
                      },
                      {
                        "keepStorage": "50GB",
                        "all": true
                      }
                    ]
                  }
                }
              }
          notify: Restart Docker

        - name: Enable Docker service
          service:
            name: docker
            enabled: yes
            state: started

        - name: Configure systemd-resolved global settings
          copy:
            dest: /etc/systemd/resolved.conf.d/global.conf
            content: |
              [Resolve]
              DNSStubListenerExtra=172.17.0.1

              MulticastDNS=no
              LLMNR=no

              ReadEtcHosts=yes
            mode: '0644'
          notify: Restart systemd-resolved

        - name: Enable systemd-resolved service
          service:
            name: systemd-resolved
            enabled: yes
            state: started

    - name: Handle system reboot check
      block:
        - name: Check if reboot is required
          stat:
            path: /var/run/reboot-required
          register: reboot_required_file

        - name: Print reboot status
          debug:
            msg: "System reboot is required"
          when: reboot_required_file.stat.exists
      when: system_upgraded is success
